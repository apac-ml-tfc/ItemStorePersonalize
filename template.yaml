AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Parameters:
  BucketName:
    Description: Name of the S3 bucket used to host deployment artifacts including web static assets.
    Type: String
    ConstraintDescription: Must be a valid S3 bucket in the same region as this deployment.
  ProjectName:
    Description: project.
    Type: String
    Default: ItemStore
Conditions:
  IADRegion: !Equals [!Ref "AWS::Region", us-east-1]
Globals:
  Function:
    Timeout: 180
  Api:
    EndpointConfiguration: REGIONAL
    # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-property-api-corsconfiguration.html
    Cors: "'*''"
    # Domain:
    #   DomainName: www.my-domain.com
    #   CertificateArn: my-valid-cert-arn
    #   EndpointConfiguration: EDGE

# ---------- VPC - SUBNET - SECURITY GROUPS  ---------
Resources:
  ItemStoreVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: '172.31.0.0/16'
  ItemStoreInternetGateway:
    Type: AWS::EC2::InternetGateway
  ItemStoreAttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref ItemStoreInternetGateway
      VpcId: !Ref ItemStoreVPC
  ItemStoreSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Select [0, !Cidr [!GetAtt ItemStoreVPC.CidrBlock, 3, 8]]
      VpcId: !Ref ItemStoreVPC
      # The following examples show valid patterns for using nested intrinsic functions using short form YAML. You can't nest short form functions consecutively, so a pattern like !GetAZs !Ref is invalid.
      AvailabilityZone: !Select [0, Fn::GetAZs: !Ref 'AWS::Region']
  ItemStoreSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Select [1, !Cidr [!GetAtt ItemStoreVPC.CidrBlock, 3, 8]]
      VpcId: !Ref ItemStoreVPC
      AvailabilityZone: !Select [1, Fn::GetAZs: !Ref 'AWS::Region']
  ItemStoreVPCRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref ItemStoreVPC
  ItemStoreVPCPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref ItemStoreVPC
  RouteToInternet:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref ItemStoreVPCPublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref ItemStoreInternetGateway
  ItemStoreVPCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref ItemStoreVPCRouteTable
      SubnetId: !Ref ItemStoreSubnet1
  ItemStoreVPCRouteTableAssociationTwo:
    DependsOn: RouteToInternet
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref ItemStoreVPCPublicRouteTable
      SubnetId: !Ref ItemStoreSubnet2

# ---------- ROLES FOR DYNAMODB ---------
  DynamoDbRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${ProjectName}-DynamoDbLambda'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        - 'arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess'
      Policies:
        - PolicyName: TableItemsAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'dynamodb:PutItem'
                  - 'dynamodb:Query'
                  - 'dynamodb:UpdateTable'
                  - 'dynamodb:UpdateItem'
                  - 'dynamodb:BatchWriteItem'
                  - 'dynamodb:GetItem'
                  - 'dynamodb:Scan'
                  - 'dynamodb:DeleteItem'
                Resource:
                  - !GetAtt TableItems.Arn
                  - !Join ['', [!GetAtt TableItems.Arn, '/*']]
  APIGateWayRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${ProjectName}-APIGateWayRole'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs'
        - 'arn:aws:iam::aws:policy/AmazonKinesisFullAccess'

# ---------- DYNAMODB TABLES DEFINITIONS ---------
  TableItems:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: !Sub '${ProjectName}-Items'
      AttributeDefinitions:
        - AttributeName: asin
          AttributeType: S
      KeySchema:
        - AttributeName: asin
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES

# ---------- ELASTICSEARCH ROLE - Domain -----------
  LambdaAdminRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${ProjectName}-LambdaAdminRole'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AdministratorAccess'
  ESSearchRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${ProjectName}-ESSearchRole'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
      Policies:
        - PolicyName: !Sub '${ProjectName}-lambda-policy'
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'es:ESHttpPost'
                  - 'es:ESHttpGet'
                # arn:aws:es:<REGION>:<ACCOUNTID>:domain/<ESDOMAIN>/*
                Resource: !Join ['',['arn:aws:es:',!Ref 'AWS::Region',':',!Ref 'AWS::AccountId',':domain/',!Ref ElasticsearchDomain,'/*']]
              - Effect: Allow
                Action:
                  - 's3:ListBucket'
                  - 's3:GetObject'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'dynamodb:DescribeStream'
                  - 'dynamodb:GetRecords'
                  - 'dynamodb:GetShardIterator'
                  - 'dynamodb:ListStreams'
                Resource:
                  - !GetAtt TableItems.Arn
                  - !Join ['',[!GetAtt TableItems.Arn,'/stream/*']]
  ElasticsearchDomain:
    Type: 'AWS::Elasticsearch::Domain'
    Properties:
      DomainName: !Sub '${ProjectName}-domain'
      ElasticsearchVersion: '7.1'
      ElasticsearchClusterConfig:
        DedicatedMasterEnabled: false
        InstanceCount: 1
        ZoneAwarenessEnabled: false
        InstanceType: t2.small.elasticsearch
      VPCOptions:
        SubnetIds:
          - Ref: ItemStoreSubnet1
      EBSOptions:
        EBSEnabled: true
        Iops: 0
        VolumeSize: 10
        VolumeType: gp2
      AccessPolicies:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: '*'
            Action:
              - 'es:*'
            # arn:aws:es:<REGION>:<ACCOUNTID>:domain/<ESDOMAIN>/*
            Resource:   !Join ['',['arn:aws:es:',!Ref 'AWS::Region',':',!Ref 'AWS::AccountId',':domain/',!Sub '${ProjectName}-domain','/*']]
      AdvancedOptions: 'rest.action.multi.allow_explicit_index: true'

# ---------- LAMBDA STREAMING FUNCTIONS ---------
  UpdateSearchCluster:
    Type: AWS::Serverless::Function
    DependsOn:
      - TableItems
    Properties:
      FunctionName: !Sub '${ProjectName}-UpdateSearchCluster'
      Description: 'Update Elasticsearch cluster as items are added'
      Handler: index.handler
      Role: !GetAtt ESSearchRole.Arn
      Runtime: python3.8
      Timeout: 60
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt ItemStoreVPC.DefaultSecurityGroup
        SubnetIds:
          - !Ref ItemStoreSubnet1
      CodeUri: ./functions/streaming/UpdateSearchCluster/
      Environment:
        Variables:
          ESENDPOINT: !GetAtt ElasticsearchDomain.DomainEndpoint
          REGION: !Ref 'AWS::Region'
      Events:
        DynamoDB:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt TableItems.StreamArn
            StartingPosition: TRIM_HORIZON
            BatchSize: 1
            Enabled: false

# ---------- API Function ------------
  FunctionGetItem:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub '${ProjectName}-GetItem'
      Description: Get item by id
      Handler: getItem.handler
      MemorySize: 256
      Runtime: nodejs12.x
      Role: !GetAtt DynamoDbRole.Arn
      Timeout: 120
      Environment:
        Variables:
          TABLE_NAME: !Sub '${ProjectName}-Items'
      CodeUri: ./functions/APIs/GetItem/
      Events:
        APIgateway:
          Type: Api
          Properties:
            Path: /items/{id}
            Method: get
  FunctionGetItemDescription:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub '${ProjectName}-GetItemDescription'
      Description: Get item description by id from Amazon
      Handler: main.handler
      MemorySize: 1344
      Runtime: nodejs12.x
      Role: !GetAtt LambdaAdminRole.Arn
      Timeout: 60
      Environment:
        Variables:
          # TODO: Still necessary?
          CUSTOM_CHROME: 'true'
      CodeUri: ./functions/APIs/GetItemDescription/
      Events:
        APIgateway:
          Type: Api
          Properties:
            Path: /description
            Method: get
  FunctionListItems:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub '${ProjectName}-ListItems'
      Description: Get list of items by category
      Handler: listItems.handler
      MemorySize: 256
      Runtime: nodejs12.x
      Role: !GetAtt DynamoDbRole.Arn
      Timeout: 120
      Environment:
        Variables:
          TABLE_NAME: !Sub '${ProjectName}-Items'
      CodeUri: ./functions/APIs/ListItems/
      Events:
        APIgateway:
          Type: Api
          Properties:
            Path: /items
            Method: get
  FunctionUploadItems:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub '${ProjectName}-UploadItems'
      Description: Upload sample data for items
      Handler: uploadItems.handler
      Runtime: nodejs12.x
      Role: !GetAtt DynamoDbRole.Arn
      Timeout: 120
      MemorySize: 512
      Environment:
        Variables:
          TABLE_NAME: !Sub '${ProjectName}-Items'
          S3_BUCKET: products-recommendation-dataset
          FILE_NAME: dummyitems.json
      CodeUri: ./functions/setup/
  FunctionGetRecommendations:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub '${ProjectName}-GetRecommendations'
      CodeUri: ./functions/APIs/getRecommendation/
      Description: Get the product recommendations by user
      Role: !GetAtt LambdaAdminRole.Arn
      Environment:
        Variables:
          ddb_tablename: !Sub '${ProjectName}-Items'
          Campaign_ARN: 'arn:aws:personalize:us-east-1:387269085412:campaign/personalize-demo-camp'
      Handler: getRecommendation.handler
      MemorySize: 256
      Runtime: python3.8
      Timeout: 30
      Events:
        APIgateway:
          Type: Api
          Properties:
            Path: /recommendations
            Method: get
        APIgatewayPath:
          Type: Api
          Properties:
            Path: /recommendations/{userid}
            Method: get
  FunctionGetRecommendationsByItem:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub '${ProjectName}-GetRecommendationsByItem'
      CodeUri: ./functions/APIs/getRecommendationByItem
      Description: Get the product recommendations by item
      Role: !GetAtt LambdaAdminRole.Arn
      Environment:
        Variables:
          ddb_tablename: !Sub '${ProjectName}-Items'
          Campaign_ARN: 'arn:aws:personalize:us-east-1:387269085412:campaign/SIM-campaign'
      Handler: getRecommendationByItem.handler
      MemorySize: 256
      Runtime: python3.8
      Timeout: 30
      Events:
        APIgateway:
          Type: Api
          Properties:
            Path: /recommendationsitem/{itemid}
            Method: get

# ---------- LAMBDA FUNCTIONS for ELASTICSEARCH ---------
  FunctionSearch:
    Type: 'AWS::Serverless::Function'
    DependsOn:
      - TableItems
    Properties:
      FunctionName: !Sub '${ProjectName}-Search'
      Description: Search for items across item names, authors, and categories
      Handler: index.handler
      MemorySize: 256
      Role: !GetAtt ESSearchRole.Arn
      Runtime: python3.8
      Timeout: 60
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt ItemStoreVPC.DefaultSecurityGroup
        SubnetIds:
          - !Ref ItemStoreSubnet1
      CodeUri: ./functions/APIs/Search/
      Environment:
        Variables:
          ESENDPOINT: !GetAtt ElasticsearchDomain.DomainEndpoint
          DDB_TABLE: !Sub '${ProjectName}-Items'
          REGION: !Ref 'AWS::Region'
  FunctionSearchRerank:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub '${ProjectName}-Rerank'
      Description: Search then rerank
      Handler: index.handler
      MemorySize: 256
      Role: !GetAtt LambdaAdminRole.Arn
      Runtime: python3.8
      Timeout: 60
      CodeUri: ./functions/APIs/SearchRerank/
      Environment:
        Variables:
          ESENDPOINT: !GetAtt ElasticsearchDomain.DomainEndpoint
          DDB_TABLE: !Sub '${ProjectName}-Items'
          SEARCH_ARN: !GetAtt FunctionSearch.Arn
          RANKING_ARN: arn:aws:personalize:us-east-1:387269085412:campaign/personalize-demo-soln-ranking
      Events:
        APIgateway:
          Type: Api
          Properties:
            Path: /search
            Method: get


#   ApiGatewayDeployment:
#     Type: AWS::ApiGateway::Deployment
#     DependsOn:
#       - RecomendationsApiRequestGET
#       - RecomendationsApiRequestOPTIONS
#       - RecomendationsByUserApiRequestGET
#       - RecomendationsByUserApiRequestOPTIONS
#       - RecomendationsByItemApiRequestGET
#       - RecomendationsByItemApiRequestOPTIONS
#       - ItemsApiRequestGET
#       - ItemsApiRequestOPTIONS
#       - ItemItemApiRequestGET
#       - ItemItemApiRequestOPTIONS
#       - ItemDescriptionApiRequestGET
#       - ItemDescriptionApiRequestOPTIONS
#       - SearchApiRequestGET
#       - SearchApiRequestOPTIONS
#     Properties:
#       Description: All store API deployment
#       RestApiId: !Ref AppApi
#       StageName: api-prod

# # ------- CLOUDFRONT DISTRIBUTION -------
  WebsiteOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub "web-access-${WebBucket}"

  WebBucket:
    Type: AWS::S3::Bucket
    Properties:
      CorsConfiguration:
        CorsRules:
          - Id: AllowAll
            AllowedMethods:
              - GET
              - HEAD
            AllowedOrigins:
              - "*"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      WebsiteConfiguration:
        IndexDocument: "index.html"
        ErrorDocument: "index.html"

  WebBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebBucket
      PolicyDocument:
        Statement:
          - Action:
              - "s3:GetObject"
            Effect: Allow
            Resource: !Join ['',['arn:aws:s3:::',!Ref WebBucket,'/*']]
            Principal:
              CanonicalUser: !GetAtt WebsiteOriginAccessIdentity.S3CanonicalUserId
  # WebCDN:
  #   Type: AWS::CloudFront::Distribution
  #   Properties:
  #     DistributionConfig:
  #       DefaultCacheBehavior: # S3 origin is default
  #         AllowedMethods:
  #           - GET
  #           - HEAD
  #           - OPTIONS
  #         CachedMethods: # Cache get requests only
  #           - GET
  #           - HEAD
  #           - OPTIONS
  #         DefaultTTL: 60
  #         MaxTTL: 60
  #         ForwardedValues:
  #           QueryString: true
  #         TargetOriginId: webstatic
  #         ViewerProtocolPolicy: redirect-to-https
  #       CacheBehaviors: # Alternative behavior for the API gateway
  #         - AllowedMethods:
  #             - DELETE
  #             - GET
  #             - HEAD
  #             - OPTIONS
  #             - PATCH
  #             - POST
  #             - PUT
  #           CachedMethods: # Cache get requests only
  #             - GET
  #             - HEAD
  #             - OPTIONS
  #           Compress: true
  #           DefaultTTL: 60
  #           MaxTTL: 60
  #           ForwardedValues:
  #             Cookies:
  #               Forward: all
  #             Headers: # Need to whitelist all headers that API gateway requires:
  #               - Accept
  #               - Referer
  #               - Athorization
  #               - Content-Type
  #             QueryString: true
  #           PathPattern: "/api-prod/*"
  #           TargetOriginId: api
  #           ViewerProtocolPolicy: https-only
  #       DefaultRootObject: index.html
  #       Enabled: true
  #       HttpVersion: http2
  #       Origins:
  #         - # Note: DO NOT use !GetAtt WebBucket.DomainName for DomainName
  #           # https://stackoverflow.com/q/38735306
  #           #DomainName: !GetAtt WebBucket.DomainName
  #           DomainName: !Sub ${WebBucket}.s3-website-${AWS::Region}.amazonaws.com
  #           Id: webstatic
  #           S3OriginConfig:
  #             OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${WebsiteOriginAccessIdentity}
  #           OriginPath: /web
  #         - DomainName:
  #             Fn::Join:
  #               - ""
  #               - - Ref: AppApi
  #                 - ".execute-api."
  #                 - Ref: AWS::Region
  #                 - ".amazonaws.com"
  #           Id: api
  #           CustomOriginConfig:
  #             OriginProtocolPolicy: https-only
  #           # Note we don't map to a particular OriginPath - all API deployments eligible IF PathPattern matched
  #       # Consider bumping up to PriceClass_All if South America or Australia are important to you:
  #       PriceClass: PriceClass_200

# # ========== AL/ML TEAM =================
#   StagingS3Bucket:
#     Type: AWS::S3::Bucket
#     Properties:
#       BucketName: !Sub '${ProjectName}-staging'
#   # SageMaker Execution Role
#   SageMakerIamRole:
#     Type: "AWS::IAM::Role"
#     Properties:
#       AssumeRolePolicyDocument:
#         Version: "2012-10-17"
#         Statement:
#           -
#             Effect: Allow
#             Principal:
#               Service: sagemaker.amazonaws.com
#             Action: sts:AssumeRole
#       Path: "/"
#       ManagedPolicyArns:
#         - "arn:aws:iam::aws:policy/AmazonSageMakerFullAccess"
#         - "arn:aws:iam::aws:policy/AmazonS3FullAccess"
#         - "arn:aws:iam::aws:policy/service-role/AmazonPersonalizeFullAccess"
#         - "arn:aws:iam::aws:policy/IAMFullAccess"

#   # Lifecycle config to expose CloudFormation stack name to notebook env vars
#   # TODO: This works for all notebook kernels, but not Jupyter terminals
#   # (Jupyter seems to start terminals *almost* in JupyterSystemEnv but without all initialisation)
#   NotebookLifecycleConfig:
#     Type: "AWS::SageMaker::NotebookInstanceLifecycleConfig"
#     Properties:
#       OnStart:
#         - Content:
#             # See this note on escaping variables in CloudFormation !Sub functions:
#             # https://stackoverflow.com/questions/44458304/how-to-escape-in-cloudformations-fnsub
#             Fn::Base64: !Sub |
#               for d in /home/ec2-user/anaconda3/envs/*/ ; do
#                 touch "${!d}etc/conda/activate.d/env_vars.sh"
#                 echo "export CLOUDFORMATION_STACK_NAME=${AWS::StackName}" >> "${!d}etc/conda/activate.d/env_vars.sh"
#               done

#   # SageMaker notebook
#   NotebookInstance:
#     Type: "AWS::SageMaker::NotebookInstance"
#     DependsOn:
#       - NotebookLifecycleConfig
#     Properties:
#       InstanceType: "ml.t2.medium"
#       NotebookInstanceName: !Sub '${ProjectName}-Notebook'
#       LifecycleConfigName: !GetAtt NotebookLifecycleConfig.NotebookInstanceLifecycleConfigName
#       RoleArn: !GetAtt SageMakerIamRole.Arn
#       VolumeSizeInGB: 10
#       DefaultCodeRepository: https://github.com/apac-ml-tfc/personalize-demo

# # TODO: PostClickEvent
#   PostClickEventStream:
#     Type: AWS::Kinesis::Stream
#     Properties:
#         Name: !Sub '${ProjectName}-Clickstream'
#         RetentionPeriodHours: 24
#         ShardCount: 1
# # TODO: PostClickEventFirehose
#   PostClickEventApiResource:
#     Type: 'AWS::ApiGateway::Resource'
#     Properties:
#       RestApiId: !Ref AppApi
#       ParentId: !GetAtt
#         - AppApi
#         - RootResourceId
#       PathPart: clickevent
#   PostClickEventApiRequestPOST:
#     DependsOn:
#       - PostClickEventApiResource
#       - FunctionGetRecommendationsByItem
#     Type: 'AWS::ApiGateway::Method'
#     Properties:
#       AuthorizationType: NONE
#       HttpMethod: POST
#       Integration:
#         Type: AWS
#         IntegrationHttpMethod: POST
#         Credentials:
#           Fn::GetAtt: [APIGateWayRole, Arn]
#         Uri: !Join
#           - ''
#           - - 'arn:aws:apigateway:'
#             - !Ref 'AWS::Region'
#             - ':kinesis:action/PutRecord'
#         IntegrationResponses:
#           - StatusCode: 200
#         RequestTemplates:
#           application/json: !Sub '{"Data":"$util.base64Encode($input.body)","PartitionKey":"Partition1","StreamName":"${PostClickEventStream}"}'
#       ResourceId: !Ref PostClickEventApiResource
#       RestApiId: !Ref AppApi
#       MethodResponses:
#         - StatusCode: 200
#           ResponseModels:
#             application/json: Empty
#   PostClickEventApiRequestOPTIONS:
#     DependsOn:
#       - PostClickEventApiResource
#     Type: 'AWS::ApiGateway::Method'
#     Properties:
#       ResourceId: !Ref PostClickEventApiResource
#       RestApiId: !Ref AppApi
#       AuthorizationType: None
#       HttpMethod: OPTIONS
#       Integration:
#         Type: MOCK
#         IntegrationResponses:
#           - ResponseParameters:
#               method.response.header.Access-Control-Allow-Headers: >-
#                 'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'
#               method.response.header.Access-Control-Allow-Methods: '''GET,POST,PUT,DELETE,OPTIONS,HEAD,PATCH'''
#               method.response.header.Access-Control-Allow-Origin: '''*'''
#             ResponseTemplates:
#               application/json: ''
#             StatusCode: '200'
#         PassthroughBehavior: WHEN_NO_MATCH
#         RequestTemplates:
#           application/json: '{"statusCode": 200}'
#       MethodResponses:
#         - ResponseModels:
#             application/json: Empty
#           ResponseParameters:
#             method.response.header.Access-Control-Allow-Headers: true
#             method.response.header.Access-Control-Allow-Methods: true
#             method.response.header.Access-Control-Allow-Origin: true
#           StatusCode: '200'
#   PostClickEventFuction:
#     Type: 'AWS::Serverless::Function'
#     Properties:
#       FunctionName: !Sub '${ProjectName}-PostClickEvent'
#       Description: PostClickEvent fucntion
#       Handler: index.handler
#       MemorySize: 256
#       Runtime: python3.8
#       Role: !GetAtt
#         - LambdaAdminRole
#         - Arn
#       Timeout: 69
#       Environment:
#         Variables:
#           TRACKING_ID: '8b1ce80f-3c86-4924-aaeb-f4a7bb992a53'
#           # TODO: PUT TRACKING ID HERE
#       CodeUri: ./functions/APIs/PostClickEvent/
#   PostClickEventFuctionPermission:
#     Type: 'AWS::Lambda::Permission'
#     Properties:
#       Action: 'lambda:InvokeFunction'
#       FunctionName: !Ref PostClickEventFuction
#       Principal: kinesis.amazonaws.com
#       SourceArn:
#         Fn::GetAtt: [PostClickEventStream, Arn]
#   PostClickEventMappping:
#     Type: AWS::Lambda::EventSourceMapping
#     Properties:
#       EventSourceArn:
#         Fn::GetAtt: [PostClickEventStream, Arn]
#       FunctionName:
#         Fn::GetAtt:
#           - "PostClickEventFuction"
#           - "Arn"
#       StartingPosition: "TRIM_HORIZON"

# # PostClickEventS3

# # TODO: DataPipelineBN

# Outputs:
#   StagingS3Bucket:
#     Value: !Ref StagingS3Bucket
#     Description: S3 Bucket for object storage
#   WebBucketName:
#     Value: !Ref WebBucket
#     Description: S3 Bucket for web asset storage
